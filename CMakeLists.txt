CMAKE_MINIMUM_REQUIRED (VERSION 2.8)

PROJECT (HANDYSTATS)

FILE (READ "${CMAKE_CURRENT_SOURCE_DIR}/debian/changelog" DEBCHANGELOG)

STRING (REGEX MATCH "([0-9]+\\.[0-9]+\\.[0-9]+)" HANDYSTATS_VERSION "${DEBCHANGELOG}")
STRING (REGEX MATCH "(^[0-9]+)" HANDYSTATS_SOVERSION "${HANDYSTATS_VERSION}")

# Options
OPTION (WITH_TESTS "Build tests" ON)

OPTION (WITH_PYTHON "Build python bindings" OFF)

OPTION (WITH_UTILS "Build utilities" OFF)

OPTION (WITH_BENCHMARKS "Build benchmarks" OFF)

# Build with debug info
IF (NOT CMAKE_BUILD_TYPE)
	SET (CMAKE_BUILD_TYPE RelWithDebInfo)
ENDIF ()

# CXX_FLAGS
SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wreorder -Wreturn-type -Wunused-variable -pedantic")
SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_GLIBCXX_USE_NANOSLEEP")
SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_GLIBCXX_USE_CLOCK_MONOTONIC")
SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_GLIBCXX_USE_SCHED_YIELD")

# C_FLAGS
SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wreturn-type -Wunused-variable -pedantic")
SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GLIBCXX_USE_NANOSLEEP")
SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GLIBCXX_USE_CLOCK_MONOTONIC")
SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_POSIX_C_SOURCE=200809L")

# LIB SUFFIX
GET_PROPERTY (LIB64 GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS)
IF (LIB64)
	SET (LIBSUFFIX 64)
ELSE ()
	SET (LIBSUFFIX "")
ENDIF()
SET (LIBDIR lib${LIBSUFFIX})


SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LIBDIR})

# Remember library name and output dir
SET (HANDYSTATS_LIBRARY handystats)
SET (HANDYSTATS_LIBRARY_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_LIBRARY_OUTPUT_DIRECTORY})

SET (HANDYSTATS_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include)
SET (HANDYSTATS_SRC_DIR ${PROJECT_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES (BEFORE ${HANDYSTATS_INCLUDE_DIR} ${HANDYSTATS_SRC_DIR})

# Build library
FILE (GLOB_RECURSE HANDY_SRC_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "src/*.cpp")
ADD_LIBRARY (${HANDYSTATS_LIBRARY} SHARED ${HANDY_SRC_FILES})

SET_TARGET_PROPERTIES (${HANDYSTATS_LIBRARY} PROPERTIES
	VERSION ${HANDYSTATS_VERSION}
	SOVERSION ${HANDYSTATS_SOVERSION})
TARGET_LINK_LIBRARIES (${HANDYSTATS_LIBRARY} rt)

# install library
INSTALL (TARGETS ${HANDYSTATS_LIBRARY}
	LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/${LIBDIR}
	COMPONENT library
	)

# install headers (-dev)
INSTALL (DIRECTORY ${HANDYSTATS_INCLUDE_DIR}/handystats
	DESTINATION ${CMAKE_INSTALL_PREFIX}/include
	COMPONENT development
	)


ADD_CUSTOM_TARGET (install_library
	${CMAKE_COMMAND}
	-D "CMAKE_INSTALL_COMPONENT=library"
	-P "${CMAKE_CURRENT_BINARY_DIR}/cmake_install.cmake"
	)
ADD_DEPENDENCIES (install_library ${HANDYSTATS_LIBRARY})

ADD_CUSTOM_TARGET (install_development
	${CMAKE_COMMAND}
	-D "CMAKE_INSTALL_COMPONENT=development"
	-P "${CMAKE_CURRENT_BINARY_DIR}/cmake_install.cmake"
	)


# Tests
IF (WITH_TESTS)
	ADD_SUBDIRECTORY (tests EXCLUDE_FROM_ALL)
ENDIF ()

# Bindings
IF (WITH_PYTHON)
	ADD_SUBDIRECTORY (bindings/python EXCLUDE_FROM_ALL)
ENDIF ()

# Benchmarks
IF (WITH_BENCHMARKS)
	ADD_SUBDIRECTORY (benchmarks EXCLUDE_FROM_ALL)
ENDIF ()

# Utilities
IF (WITH_UTILS)
	ADD_SUBDIRECTORY (utils EXCLUDE_FROM_ALL)
ENDIF ()
